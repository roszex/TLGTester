import os
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import WebAppInfo, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
import asyncio

# Load environment variables
load_dotenv(".env")

BOT_TOKEN = os.getenv("BOT_TOKEN")
# –ò—Å–ø–æ–ª—å–∑—É–µ–º Git-Pages —Å–µ—Ä–≤–µ—Ä –¥–ª—è WebApp
WEBAPP_URL = str(os.getenv("WEBAPP_URL"))
ADMIN_ID = os.getenv("ADMIN_ID")  # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∏–¥–∞ –≤ JSON —Ñ–∞–π–ª
def save_lead(user_data, form_data):
    try:
        lead_data = {
            "user_id": user_data.get('user_id'),
            "form_data": form_data
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª leads.json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        leads_file = "leads.json"
        leads = []
        
        if os.path.exists(leads_file):
            with open(leads_file, 'r', encoding='utf-8') as f:
                leads = json.load(f)
        
        leads.append(lead_data)
        
        with open(leads_file, 'w', encoding='utf-8') as f:
            json.dump(leads, f, ensure_ascii=False, indent=2)
        
        print(f"Bot: –õ–∏–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {leads_file}")
        return True
    except Exception as e:
        print(f"Bot: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏–¥–∞: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async def notify_admin(user_data, form_data):
    if not ADMIN_ID:
        print("Bot: ADMIN_ID –Ω–µ –∑–∞–¥–∞–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ª–∏–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞
        leads_file = "leads.json"
        lead_number = 1
        if os.path.exists(leads_file):
            with open(leads_file, 'r', encoding='utf-8') as f:
                leads = json.load(f)
                lead_number = len(leads)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        user_id = user_data.get('user_id', '')
        
        admin_message = f"üéØ –õ–∏–¥ #{lead_number}\n"
        admin_message += f"üë§ {user_id}\n"
        admin_message += f"‚è∞ {datetime.now().strftime('%d.%m %H:%M')}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(ADMIN_ID, admin_message)
        print(f"Bot: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {ADMIN_ID}")
        
    except Exception as e:
        print(f"Bot: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

@dp.message(Command("start"))
async def start(message: types.Message):
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print(f"Bot: –ü–æ–ª—É—á–µ–Ω /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    if message.from_user:
        print(f"Bot: username = {message.from_user.username}")
        print(f"Bot: id = {message.from_user.id}")
        print(f"Bot: first_name = {message.from_user.first_name}")
        print(f"Bot: last_name = {message.from_user.last_name}")
    else:
        print(f"Bot: message.from_user is None")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º user_id - –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º username –∏–ª–∏ ID
    user_id = None
    if message.from_user and message.from_user.username:
        user_id = '@' + message.from_user.username
    elif message.from_user and message.from_user.id:
        user_id = 'user_' + str(message.from_user.id)
    else:
        user_id = 'unknown_user'
    
    print(f"Bot: –°–æ–∑–¥–∞–Ω user_id = {user_id}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º user_id –∫ URL
    webapp_url = f"{WEBAPP_URL}?user_id={user_id}"
    print(f"Bot: WebApp URL = {webapp_url}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if message.from_user and message.from_user.username:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, @{message.from_user.username}! –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç Telegram Lead Generator:\n\nüì± –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\nüìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É\nüéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n–ù–∞–∂–º–∏ '–°–º–æ—Ç—Ä–µ—Ç—å' —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    elif message.from_user and message.from_user.first_name:
        greeting = f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç Telegram Lead Generator:\n\nüì± –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\nüìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É\nüéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n–ù–∞–∂–º–∏ '–°–º–æ—Ç—Ä–µ—Ç—å' —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    else:
        greeting = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç Telegram Lead Generator:\n\nüì± –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\nüìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É\nüéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n–ù–∞–∂–º–∏ '–°–º–æ—Ç—Ä–µ—Ç—å' —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(
        text="–°–º–æ—Ç—Ä–µ—Ç—å",
        web_app=WebAppInfo(url=webapp_url)
    ))
    await message.answer(
        greeting,
        reply_markup=builder.as_markup(resize_keyboard=True),
        parse_mode=ParseMode.HTML
    )

@dp.message()
async def handle_webapp_data(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp
    if message.web_app_data:
        try:
            import json
            data = json.loads(message.web_app_data.data)
            print(f"Bot: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp: {data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
            if data.get('action') == 'thank_you_response':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                user_id = data.get('user_id', 'unknown')
                form_data = data.get('form_data', {})
                print(f"Bot: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                print(f"Bot: –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã: {form_data}")
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                user_data = {
                    'user_id': user_id,
                    'username': user_id.replace('@', '') if user_id.startswith('@') else None,
                }
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã
                form_message = ""
                if form_data:
                    form_message = "\n\nüìã –í–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
                    if form_data.get('age'):
                        form_message += f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {form_data['age']} –ª–µ—Ç\n"
                    if form_data.get('occupation'):
                        form_message += f"‚Ä¢ –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {form_data['occupation']}\n"
                    if form_data.get('income'):
                        form_message += f"‚Ä¢ –î–æ—Ö–æ–¥: {form_data['income']}\n"
                    if form_data.get('motivation'):
                        form_message += f"‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {form_data['motivation']}\n"
                    if form_data.get('teamwork'):
                        form_message += f"‚Ä¢ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞: {form_data['teamwork']}\n"
                else:
                    form_message = "\n\nüìã –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ—Å—Ç–∞—Ä—Ç–∞
                builder = ReplyKeyboardBuilder()
                builder.add(KeyboardButton(
                    text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}?user_id={user_id}")
                ))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º, –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã –∏ –∫–Ω–æ–ø–∫–æ–π —Ä–µ—Å—Ç–∞—Ä—Ç–∞
                caption = f"{form_message}\n\n–ï—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥ —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–π -\n\n–°–≤—è–∑—å —Å–æ –º–Ω–æ–π: @desperatecoder\n\n–¢–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª: https://t.me/desperateecoder"
                
                try:
                    await message.answer_photo(
                        photo=types.FSInputFile("outro_image.JPG"),
                        caption=caption,
                        reply_markup=builder.as_markup(resize_keyboard=True)
                    )
                    print(f"Bot: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã –∏ –∫–Ω–æ–ø–∫–æ–π —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as photo_error:
                    print(f"Bot: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {photo_error}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
                    await message.answer(
                        caption,
                        reply_markup=builder.as_markup(resize_keyboard=True)
                    )
                    print(f"Bot: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥ –≤ JSON —Ñ–∞–π–ª
                save_lead(user_data, form_data)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                await notify_admin(user_data, form_data)
                
            else:
                print(f"Bot: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {data.get('action')}")
                
        except json.JSONDecodeError as e:
            print(f"Bot: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        except Exception as e:
            print(f"Bot: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö WebApp: {e}")
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass

async def main():
    # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        print("Webhook —É–¥–∞–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 